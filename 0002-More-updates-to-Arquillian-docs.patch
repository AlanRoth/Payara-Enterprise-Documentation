From 47af20a5db5784655de7a2602e2a06a973f87ddc Mon Sep 17 00:00:00 2001
From: Ondrej Mihalyi <ondrej.mihalyi@payara.fish>
Date: Mon, 29 Mar 2021 12:46:53 +0200
Subject: [PATCH 2/2] More updates to Arquillian docs

---
 docs/modules/ROOT/nav.adoc                    |  2 +-
 .../arquillian-containers/README.adoc         | 20 ++++---
 .../payara-micro-managed.adoc                 | 13 +++--
 .../payara-server-embedded.adoc               |  7 ++-
 .../payara-server-managed.adoc                | 56 ++++++++++++++++++-
 .../payara-server-remote.adoc                 |  7 ++-
 .../deployment-descriptors.adoc               |  8 +--
 7 files changed, 92 insertions(+), 21 deletions(-)

diff --git a/docs/modules/ROOT/nav.adoc b/docs/modules/ROOT/nav.adoc
index c7423da4..7daeb58c 100644
--- a/docs/modules/ROOT/nav.adoc
+++ b/docs/modules/ROOT/nav.adoc
@@ -252,10 +252,10 @@
 *** xref:documentation/ecosystem/vscode-extension/payara-server.adoc[Payara Server]
 *** xref:documentation/ecosystem/vscode-extension/payara-micro.adoc[Payara Micro]
 ** xref:documentation/ecosystem/arquillian-containers/README.adoc[Arquillian Containers]
-*** xref:documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc[Payara Micro Managed]
 *** xref:documentation/ecosystem/arquillian-containers/payara-server-remote.adoc[Payara Server Remote]
 *** xref:documentation/ecosystem/arquillian-containers/payara-server-managed.adoc[Payara Server Managed]
 *** xref:documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc[Payara Server Embedded]
+*** xref:documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc[Payara Micro Managed]
 ** xref:documentation/ecosystem/cloud-connectors/README.adoc[Cloud Connectors]
 *** xref:documentation/ecosystem/cloud-connectors/amazon-sqs.adoc[Amazon SQS]
 *** xref:documentation/ecosystem/cloud-connectors/apache-kafka.adoc[Apache Kafka]
diff --git a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/README.adoc b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/README.adoc
index 6a754e88..b8644086 100644
--- a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/README.adoc
+++ b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/README.adoc
@@ -1,17 +1,20 @@
 = Arquillian Containers
 
-:previewVersion: 5.181
-include::partial$tech-preview.adoc[]
-
 The Payara Arquillian containers provide various Arquillian containers for integration testing with Payara Community.
 
-In version {currentVersion}, there are containers available for the following distributions:
+In version {currentVersion}, the following containers are available:
+
+Payara Server:
 
-* xref:documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc[Payara Micro Managed]
 * xref:documentation/ecosystem/arquillian-containers/payara-server-remote.adoc[Payara Server Remote]
 * xref:documentation/ecosystem/arquillian-containers/payara-server-managed.adoc[Payara Server Managed]
 * xref:documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc[Payara Server Embedded]
 
+Payara Micro:
+
+* xref:documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc[Payara Micro Managed]
+
+
 == Obtaining the Containers
 
 Arquillian containers are included in a project via their Maven coordinates:
@@ -27,19 +30,18 @@ Arquillian containers are included in a project via their Maven coordinates:
 
 Some containers will be either in development or an early release version. In these cases
 the same process can be used, but the artifact will need to be built from source.
-The containers can be found in the main Payara source.
+The containers can be found in the Payara Arquillian source code repository.
 
-Clone the https://github.com/payara/Payara[Payara] Git repository:
+Clone the https://github.com/payara/ecosystem-arquillian-connectors[ecosystem-arquillian-connectors] Git repository:
 
 [source,Shell]
 ----
-git clone https://github.com/payara/Payara.git
+git clone https://github.com/payara/ecosystem-arquillian-connectors.git
 ----
 
 Build and install:
 
 [source,Shell]
 ----
-cd Payara/
 mvn clean install -DskipTests
 ----
\ No newline at end of file
diff --git a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc
index 3ad32638..6dd7ab5a 100644
--- a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc
+++ b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc
@@ -3,6 +3,7 @@
 The Payara Micro Managed Arquillian container provides a managed Payara Micro
 instance for integration testing.
 
+[[usage]]
 == Usage
 
 The Payara Micro Managed Arquillian container can be found on Maven Central,
@@ -19,6 +20,7 @@ and can be included in your project using the following Maven coordinates:
 
 You can find the latest artifact version https://mvnrepository.com/artifact/fish.payara.arquillian/arquillian-payara-micro-managed[from here].
 
+[[configure]]
 == Configuring the Container
 
 The container can be configured via the arquillian.xml using the standard http://arquillian.org/arquillian-core/#container-configuration[Arquillian Container Configuration] mechanism, via system properties, or via environment variables.
@@ -34,7 +36,7 @@ The following configuration options are available:
 | Provides the location of the Payara Micro Community Jar.
 | `payara.microJar`
 | `MICRO_JAR`
-| `null`
+| 
 
 | `startupTimeoutInSeconds`
 | Specifies the amount of time in seconds that the
@@ -81,16 +83,19 @@ To change this, provide java debug options to `cmdOptions`.
 | Provides additional options to the Java process running the Micro instance (I.e. between `java` and `-jar`.).
 | `payara.cmdOptions`
 | `MICRO_CMD_OPTIONS`
-| `null`
+| 
 
 | `extraMicroOptions`
 | Provides additional options to the Micro instance (I.e. at the end of the command.).
 | `payara.extraMicroOptions`
 | `EXTRA_MICRO_OPTIONS`
-| `null`
+| 
 |===
 
-To configure the Arquillian Container options, you need using an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `randomHttpPort` and `autoBindHttp` options.
+[[examples]]
+== Examples
+
+To configure Container options using Arquillian container properties, you need to use an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `randomHttpPort` and `autoBindHttp` options.
 
 [source,XML]
 .Example `arquillian.xml` file
diff --git a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc
index 7e07786c..8cef0ef1 100644
--- a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc
+++ b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc
@@ -3,6 +3,7 @@
 The Payara Server Community Embedded container lifecycle is managed by Arquillian and
  resides in the same JVM where tests are executed using a local protocol.
 
+[[usage]]
 == Usage
 
 The Payara Server Community Embedded Arquillian container can be found on Maven Central,
@@ -19,6 +20,7 @@ and can be included in your project using the following Maven coordinates:
 
 You can find the latest artifact version https://mvnrepository.com/artifact/fish.payara.arquillian/arquillian-payara-server-embedded[from here].
 
+[[configure]]
 == Configuring the Container
 
 The container can be configured via the arquillian.xml using the standard http://arquillian.org/arquillian-core/#container-configuration[Arquillian Container Configuration] mechanism.
@@ -66,7 +68,10 @@ that will be added to the Payara instance using the `add-resources` command.
 
 |===
 
-To configure the Arquillian Container options, you need using an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `adminPort` with a static value. It configures `bindHttpsPort` as a value of a system property `my.httpsport`, which you can specify for example in the maven `surefire` plugin using the `systemPropertyVariables` option or on command line like `mvn -Dmy.httpsport=8081 test`.
+[[examples]]
+== Examples
+
+To configure the Arquillian Container options, you need to use an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `adminPort` with a static value. It configures `bindHttpsPort` as a value of a system property `my.httpsport`, which you can specify for example in the maven `surefire` plugin using the `systemPropertyVariables` option or on command line like `mvn -Dmy.httpsport=8081 test`.
 
 [source,XML]
 .Example `arquillian.xml` file
diff --git a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-managed.adoc b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-managed.adoc
index 2876aeca..c8fef9e9 100644
--- a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-managed.adoc
+++ b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-managed.adoc
@@ -5,6 +5,7 @@ The Payara Server Managed Arquillian container is remote container same as a
  (startup/shutdown) is managed by Arquillian and run as a separate process for
  integration testing. 
 
+[[usage]]
 == Usage
 
 The Payara Server Managed Arquillian container can be found on Maven Central,
@@ -21,6 +22,7 @@ and can be included in your project using the following Maven coordinates:
 
 You can find the latest artifact version https://mvnrepository.com/artifact/fish.payara.arquillian/arquillian-payara-server-managed[from here].
 
+[[configure]]
 == Configuring the Container
 
 The container can be configured via the arquillian.xml using the standard http://arquillian.org/arquillian-core/#container-configuration[Arquillian Container Configuration] mechanism.
@@ -127,7 +129,13 @@ proxy configuration).
 
 NOTE: The context root that will be used to run the tests is also retrieved automatically from the DAS server. If you do not have a `sun-web.xml`, `glassfish-web.xml` or `payara-web.xml` file in your web application, Payara will use the name of your deployment without the extension as context root. The same rule is applied for enterprise applications if there is no `application.xml` file. The jar test-deployments are treated as a web application. You can use the above standard GlassFish / Payara XML files as normal to declare your context root to be applied. You should consider the above description to avoid any conflict with your already deployed web or enterprise applications in your administrative domain. 
 
-To configure the Arquillian Container options, you need using an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `adminPort` with a static value. It configures `adminPassword` as a value of a system property `my.admin.password`, which you can specify for example in the maven `surefire` plugin using the `systemPropertyVariables` option or on command line like `mvn -Dmy.admin.password=mypassword test`.
+[[examples]]
+== Examples
+
+[[configure-example]]
+=== Exampe Configuration
+
+To configure the Arquillian Container options, you need to use an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `adminPort` with a static value. It configures `adminPassword` as a value of a system property `my.admin.password`, which you can specify for example in the maven `surefire` plugin using the `systemPropertyVariables` option or on command line like `mvn -Dmy.admin.password=mypassword test`.
 
 [source,XML]
 .Example `arquillian.xml` file
@@ -163,4 +171,50 @@ If you want to configure more containers, you can switch between them by setting
         </systemPropertyVariables>
     </configuration>
 </plugin>
+----
+
+[[automatic-download-example]]
+### Downloading Payara Server automatically from Maven
+
+You can automate downloading and installing Payara Server with maven so that the Arquillian plugin can be automatically configured and used without installing Payara Server manually.
+
+To download and install Payara Server, you can use the Maven Dependency plugin as follows:
+
+[source,XML]
+.Example Dependency plugin configuration in a `pom.xml` file
+----
+<plugin>
+    <groupId>org.apache.maven.plugins</groupId>
+    <artifactId>maven-dependency-plugin</artifactId>
+    <executions>
+        <execution>
+            <id>unpack</id>
+            <phase>process-test-classes</phase>
+            <goals>
+                <goal>unpack</goal>
+            </goals>
+            <configuration>
+                <artifactItems>
+                    <artifactItem>
+                        <groupId>fish.payara.distributions</groupId>
+                        <artifactId>payara</artifactId>
+                        <version>${payara.version}</version>
+                        <type>zip</type>
+                        <overWrite>false</overWrite>
+                        <outputDirectory>${project.build.directory}</outputDirectory>
+                    </artifactItem>
+                </artifactItems>
+            </configuration>
+        </execution>
+    </executions>
+</plugin>
+<plugin>
+    <groupId>org.apache.maven.plugins</groupId>
+    <artifactId>maven-surefire-plugin</artifactId>
+    <configuration>
+        <systemPropertyVariables>
+            <payara.home>${project.build.directory}/payara5</payara.home>
+        </systemPropertyVariables>
+    </configuration>
+</plugin>
 ----
\ No newline at end of file
diff --git a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-remote.adoc b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-remote.adoc
index 67d469d3..4a5c98b8 100644
--- a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-remote.adoc
+++ b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-remote.adoc
@@ -8,6 +8,7 @@ http or https protocol. This gives you the flexibility to use any possible
 deployment scenarios having your servers either on many different physical or 
 virtual nodes, or on the same one.
 
+[[usage]]
 == Usage
 
 The Payara Server Remote Arquillian container can be found on Maven Central,
@@ -24,6 +25,7 @@ and can be included in your project using the following Maven coordinates:
 
 You can find the latest artifact version https://mvnrepository.com/artifact/fish.payara.arquillian/arquillian-payara-server-remote[from here].
 
+[[configure]]
 == Configuring the Container
 
 The container can be configured via the arquillian.xml using the standard http://arquillian.org/arquillian-core/#container-configuration[Arquillian Container Configuration] mechanism.
@@ -103,7 +105,10 @@ proxy configuration).
 
 NOTE: The context root that will be used to run the tests is also retrieved automatically from the DAS server. If you do not have a `sun-web.xml`, `glassfish-web.xml` or `payara-web.xml` file in your web application, Payara will use the name of your deployment without the extension as context root. The same rule is applied for enterprise applications if there is no `application.xml` file. The jar test-deployments are treated as a web application. You can use the above standard GlassFish / Payara XML files as normal to declare your context root to be applied. You should consider the above description to avoid any conflict with your already deployed web or enterprise applications in your administrative domain. 
 
-To configure the Arquillian Container options, you need using an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `adminPort` with a static value. It configures `adminPassword` as a value of a system property `my.admin.password`, which you can specify for example in the maven `surefire` plugin using the `systemPropertyVariables` option or on command line like `mvn -Dmy.admin.password=mypassword test`.
+[[examples]]
+== Examples
+
+To configure the Arquillian Container options, you need to use an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `adminPort` with a static value. It configures `adminPassword` as a value of a system property `my.admin.password`, which you can specify for example in the maven `surefire` plugin using the `systemPropertyVariables` option or on command line like `mvn -Dmy.admin.password=mypassword test`.
 
 [source,XML]
 .Example `arquillian.xml` file
diff --git a/docs/modules/ROOT/pages/documentation/payara-server/app-deployment/deployment-descriptors.adoc b/docs/modules/ROOT/pages/documentation/payara-server/app-deployment/deployment-descriptors.adoc
index 0c60280a..d1ee3bda 100644
--- a/docs/modules/ROOT/pages/documentation/payara-server/app-deployment/deployment-descriptors.adoc
+++ b/docs/modules/ROOT/pages/documentation/payara-server/app-deployment/deployment-descriptors.adoc
@@ -12,18 +12,18 @@ Payara Server Community supports specifying deployment configuration using Glass
 Additionally from version __5.183__, `payara-web.xml` can be used instead of `glassfish-web.xml`. The top level element for the `payara-web.xml` file must be `_payara-web-app_` and the schema can be refererenced by:
 
 [source,xml,subs=attributes+]
-```
+----
 <!DOCTYPE payara-web-app PUBLIC "-//Payara.fish//DTD Payara Server 4 Servlet 3.0//EN" "{payaraWebDtd}">
-```
+----
 
 Since version __5.184__
 
 `payara-resources.xml` can also be used instead of `glassfish-resources.xml`. The schema can be referenced by:
 
 [source,xml,subs=attributes+]
-```
+----
 <!DOCTYPE resources PUBLIC "-//Payara.fish//DTD Payara Server 4 Resource Definitions//EN" "{payaraResourcesDtd}">
-```
+----
 
 See the xref:/schemas/README.adoc[schema reference] for the list of deployment descriptor DTD files.
 
-- 
2.25.1

