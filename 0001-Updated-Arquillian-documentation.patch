From 37bfb2913db576314115ee05285f970d50038bad Mon Sep 17 00:00:00 2001
From: Ondrej Mihalyi <ondrej.mihalyi@payara.fish>
Date: Thu, 25 Mar 2021 18:19:23 +0100
Subject: [PATCH 1/2] Updated Arquillian documentation

---
 .../payara-micro-managed.adoc                 |  39 ++++++-
 .../payara-server-embedded.adoc               |  53 ++++++---
 .../payara-server-managed.adoc                | 107 ++++++++++++------
 .../payara-server-remote.adoc                 |  58 +++++++---
 4 files changed, 180 insertions(+), 77 deletions(-)

diff --git a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc
index d1024007..3ad32638 100644
--- a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc
+++ b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-micro-managed.adoc
@@ -21,13 +21,14 @@ You can find the latest artifact version https://mvnrepository.com/artifact/fish
 
 == Configuring the Container
 
-The following configuration options are available, each of which can be provided
-through the specified system properties or environment variables:
+The container can be configured via the arquillian.xml using the standard http://arquillian.org/arquillian-core/#container-configuration[Arquillian Container Configuration] mechanism, via system properties, or via environment variables.
+
+The following configuration options are available:
 
 [cols="1,3,2,2,1"]
 .Configuration Options
 |===
-| Option | Description | System Property | Environment Variable | Default
+| Container Option | Description | System Property | Environment Variable | Default
 
 | `microJar`
 | Provides the location of the Payara Micro Community Jar.
@@ -89,11 +90,10 @@ To change this, provide java debug options to `cmdOptions`.
 | `null`
 |===
 
-These options can all be provided through either an environment variable or system property.
-The easiest way to provide these to the test instance is by using an `arquillian.xml` file placed on the test classpath.
+To configure the Arquillian Container options, you need using an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `randomHttpPort` and `autoBindHttp` options.
 
 [source,XML]
-.Example
+.Example `arquillian.xml` file
 ----
 <?xml version="1.0"?>
 <arquillian xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
@@ -108,4 +108,31 @@ The easiest way to provide these to the test instance is by using an `arquillian
         </configuration>
     </container>
 </arquillian>
+----
+
+You can configure the options also using system properties. Here's an example configuration if you run your tests using the maven `surefire` plugin:
+
+[source,XML]
+.Example Surefire plugin configuration in a `pom.xml` file
+----
+<plugin>
+    <groupId>org.apache.maven.plugins</groupId>
+    <artifactId>maven-surefire-plugin</artifactId>
+    <configuration>
+        <systemPropertyVariables>
+            <arquillian.launch>payara-micro-managed</arquillian.launch>
+            <payara.randomHttpPort>false</payara.randomHttpPort>
+            <payara.autoBindHttp>false</payara.autoBindHttp>
+        </systemPropertyVariables>
+    </configuration>
+</plugin>
+----
+
+You can also configure the options using environment variables, for example when running the maven `mvn test` command:
+
+[source,shell]
+----
+export MICRO_RANDOM_HTTP_PORT=false
+export MICRO_AUTOBIND_HTTP=false
+mvn test
 ----
\ No newline at end of file
diff --git a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc
index 9378feee..7e07786c 100644
--- a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc
+++ b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-embedded.adoc
@@ -21,8 +21,7 @@ You can find the latest artifact version https://mvnrepository.com/artifact/fish
 
 == Configuring the Container
 
-The following configuration options are available, each of which can be provided
-through the specified system properties in the arquillian JVM:
+The container can be configured via the arquillian.xml using the standard http://arquillian.org/arquillian-core/#container-configuration[Arquillian Container Configuration] mechanism.
 
 [cols="10,80,10"]
 .Configuration Options
@@ -37,15 +36,9 @@ through the specified system properties in the arquillian JVM:
 | The port number of the https-listener for the embedded Payara Server Community.
 | `8182`
 
-| `instanceRoot`
-| The instance root directory is the domain directory and embedded Payara Server Community
- uses the server instance directory for domain configuration files.
-| `N/A`
-
-| `installRoot`
-| The install root directory is the parent directory of a Payara Server Community instance
- directory and corresponds to the base directory for an installation of Payara Server.
-| `N/A`
+| `cleanup`
+| Specifies whether Arquillian should cleanup on shutdown. This recursively deletes files in the `instanceRoot` directory.
+| `true`
 
 | `configurationReadOnly`
 | Specifies whether Payara should write back any changes to specified 
@@ -54,22 +47,29 @@ configuration file or config/domain.xml at the specified instance root.
 
 | `configurationXml`
 | Set the location of configuration file i.e. domain.xml using which the Payara Server Community should run.
-| `N/A`
+| 
+
+| `installRoot`
+| The install root directory is the parent directory of a Payara Server Community instance
+ directory and corresponds to the base directory for an installation of Payara Server.
+| 
+
+| `instanceRoot`
+| The instance root directory is the domain directory and embedded Payara Server Community
+ uses the server instance directory for domain configuration files.
+| the default domain directory
 
 | `resourcesXml`
 | A comma-separated list of Payara resources.xml files containing resources 
 that will be added to the Payara instance using the `add-resources` command.
-| `N/A`
+| 
 
-| `cleanup`
-| Specifies whether Arquillian should cleanup on shutdown. This recursively deletes files in the `instanceRoot` directory.
-| `true`
 |===
 
-The easiest way to provide these system properties to the extension runtime is by using an `arquillian.xml` file placed on the test classpath.
+To configure the Arquillian Container options, you need using an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `adminPort` with a static value. It configures `bindHttpsPort` as a value of a system property `my.httpsport`, which you can specify for example in the maven `surefire` plugin using the `systemPropertyVariables` option or on command line like `mvn -Dmy.httpsport=8081 test`.
 
 [source,XML]
-.Example
+.Example `arquillian.xml` file
 ----
 <?xml version="1.0"?>
 <arquillian xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
@@ -80,8 +80,25 @@ The easiest way to provide these system properties to the extension runtime is b
     <container qualifier="payara-embedded" default="true">
         <configuration>
             <property name="bindHttpPort">8080</property>
+            <property name="bindHttpsPort">${my.httpsport}</property>
         </configuration>
     </container>
 </arquillian>
+----
+
+If you want to configure more containers, you can switch between them by setting the `arquillian.launch` system property to the container's qualifier. This is how you can do it with the maven `surefire` plugin (`my.httpsport` system property is used to set the `bindHttpsPort` property in `arquillian.xml`):
 
+[source,XML]
+.Example Surefire plugin configuration in a `pom.xml` file
 ----
+<plugin>
+    <groupId>org.apache.maven.plugins</groupId>
+    <artifactId>maven-surefire-plugin</artifactId>
+    <configuration>
+        <systemPropertyVariables>
+            <arquillian.launch>payara</arquillian.launch>
+            <my.httpsport>8081</my.httpsport>
+        </systemPropertyVariables>
+    </configuration>
+</plugin>
+----
\ No newline at end of file
diff --git a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-managed.adoc b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-managed.adoc
index a5ae8934..2876aeca 100644
--- a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-managed.adoc
+++ b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-managed.adoc
@@ -23,47 +23,79 @@ You can find the latest artifact version https://mvnrepository.com/artifact/fish
 
 == Configuring the Container
 
-The following configuration options are available, 
-each of which can be provided through the specified system properties in the 
-arquillian JVM:
+The container can be configured via the arquillian.xml using the standard http://arquillian.org/arquillian-core/#container-configuration[Arquillian Container Configuration] mechanism.
+
+The following configuration options are required:
+
+* `payaraHome` - The local Payara installation directory. Can be also set using the `payara.home` system property.
+
+The following Arquillian Container configuration options are available:
 
 [cols="10,80,10"]
 .Configuration Options
 |===
 | Name | Description | Default
 
+| `adminHost`
+| The host to be used to access Payara Admin API.
+| `localhost`
+
 | `adminHttps`
 | You can use it to specify whether the http or https protocol shall be used 
 to access the DAS. The property value can be true or false.
 | `false`
 
-| `adminHost`
-| The host to be used to access Payara Admin API.
-| `localhost`
-
 | `adminPort`
 | The port to be used to access Payara Admin API.
 | `4848`
 
-| `authorisation`
-| If true, basic access authentication is enabled. And indicates that remote server requires an `adminUser` & `adminPassword`.
-| `false`
-
 | `adminUser`
 | The name of the admin user of your DAS. If omitted, no authentication will be used to access the DAS. In this case the `adminPassword` property should also be empty.
-| `null`
+| 
 
 | `adminPassword`
 | The password of the admin user of your DAS. Cannot be omitted if you declare the admin user. If no authentication will be used to access the DAS you must have empty password for your admin user of your domain.
-| `null`
+| 
+
+| `allowConnectingToRunningServer`
+| Allow Arquillian to use an already running Payara instance and skips `start-domain` command invocation.
+| `false`
+
+| `authorisation`
+| If true, basic access authentication is enabled. And indicates that remote server requires an `adminUser` & `adminPassword`.
+| `false`
+
+| `debug`
+| Starts the server in debug mode using standard Payara debug port.
+| `false`
+
+| `domain`
+| The Payara domain to use or the default domain if not specified.
+| the default domain
+
+| `enableH2`
+| Starts/Stops the registered H2 server using standard H2 port.
+| `false`
+
+| `ignoreCertificates`
+| If set to `true`, SSL certificate correctness is ignored. This is useful for Docker images / TestContainers when certificates are not easily matched to internally generated ones and host names are also very hard to match.
+| `false`
 
 | `libraries`
 | A comma-separated list of library JAR files. Specify the library JAR files by their relative or absolute paths. Specify relative paths relative to `domain-dir/lib/applibs`. The libraries are made available to the application in the order specified.
-| `N/A`
+| 
+
+| `outputToConsole`
+| Show the output of the admin commands on the console.
+| `true`
+
+| `payaraHome`
+| The local Payara installation directory. Required.
+| Value of the `payara.home` system property.
 
 | `properties`
 | Optional keyword-value pair that specify additional properties for the deployment. The available properties are determined by the implementation of the component that is being deployed.
-| `N/A`
+| 
 
 | `target`
 | Payara has a notion of a target, which specifies the target to which you are 
@@ -87,34 +119,18 @@ proxy configuration).
 
 | `server`
 
-| `outputToConsole`
-| Show the output of the admin commands on the console.
-| `true`
-
-| `domain`
-| The Payara domain to use or the default domain if not specified.
-| `null`
-
-| `debug`
-| Starts the server in debug mode using standard Payara debug port.
-| `false`
-
-| `allowConnectingToRunningServer`
-| Allow Arquillian to use an already running Payara instance and skips `start-domain` command invocation.
-| `false`
-
-| `enableH2`
-| Starts/Stops the registered H2 server using standard H2 port.
-| `false`
+| `type`
+| If set to `osgi`, the component is packaged as an OSGi bundle. If the component is packaged as a regular archive, do not set this option.
+| 
 |===
 
 
 NOTE: The context root that will be used to run the tests is also retrieved automatically from the DAS server. If you do not have a `sun-web.xml`, `glassfish-web.xml` or `payara-web.xml` file in your web application, Payara will use the name of your deployment without the extension as context root. The same rule is applied for enterprise applications if there is no `application.xml` file. The jar test-deployments are treated as a web application. You can use the above standard GlassFish / Payara XML files as normal to declare your context root to be applied. You should consider the above description to avoid any conflict with your already deployed web or enterprise applications in your administrative domain. 
 
-The easiest way to provide these system properties to the extension runtime is by using an arquillian.xml file placed on the test classpath.
+To configure the Arquillian Container options, you need using an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `adminPort` with a static value. It configures `adminPassword` as a value of a system property `my.admin.password`, which you can specify for example in the maven `surefire` plugin using the `systemPropertyVariables` option or on command line like `mvn -Dmy.admin.password=mypassword test`.
 
 [source,XML]
-.Example
+.Example `arquillian.xml` file
 ----
 <?xml version="1.0"?>
 <arquillian xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
@@ -125,7 +141,26 @@ The easiest way to provide these system properties to the extension runtime is b
     <container qualifier="payara" default="true">
         <configuration>
             <property name="adminPort">4848</property>
+            <property name="adminPassword">${my.admin.password}</property>
         </configuration>
     </container>
 </arquillian>
+----
+
+If you want to configure more containers, you can switch between them by setting the `arquillian.launch` system property to the container's qualifier. This is how you can do it with the maven `surefire` plugin (`my.admin.password` system property is used to set the `adminPassword` property in `arquillian.xml`):
+
+[source,XML]
+.Example Surefire plugin configuration in a `pom.xml` file
+----
+<plugin>
+    <groupId>org.apache.maven.plugins</groupId>
+    <artifactId>maven-surefire-plugin</artifactId>
+    <configuration>
+        <systemPropertyVariables>
+            <arquillian.launch>payara</arquillian.launch>
+            <payara.home>/path/to/payara</payara.home>
+            <my.admin.password>mypassword</my.admin.password>
+        </systemPropertyVariables>
+    </configuration>
+</plugin>
 ----
\ No newline at end of file
diff --git a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-remote.adoc b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-remote.adoc
index e170c462..67d469d3 100644
--- a/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-remote.adoc
+++ b/docs/modules/ROOT/pages/documentation/ecosystem/arquillian-containers/payara-server-remote.adoc
@@ -26,38 +26,40 @@ You can find the latest artifact version https://mvnrepository.com/artifact/fish
 
 == Configuring the Container
 
-The following configuration options are available, each of which can be provided
-through the specified system properties in the Arquillian JVM:
+The container can be configured via the arquillian.xml using the standard http://arquillian.org/arquillian-core/#container-configuration[Arquillian Container Configuration] mechanism.
+
+The following Arquillian Container configuration options are available:
 
 [cols="10,80,10"]
 .Configuration Options
 |===
 | Name | Description | Default
 
+| `adminHost`
+| The host to be used to access Payara Admin API.
+| `localhost`
+
 | `adminHttps`
 | You can use it to specify whether the http or https protocol shall be used 
 to access the DAS. The property value can be true or false.
 | `false`
 
-| `adminHost`
-| The host to be used to access Payara Admin API.
-| `localhost`
-
 | `adminPort`
 | The port to be used to access Payara Admin API.
 | `4848`
 
-| `authorisation`
-| If true, basic access authentication is enabled. And indicates that remote server requires an `adminUser` & `adminPassword`.
-| `false`
-
 | `adminUser`
 | The name of the admin user of your DAS. If omitted, no authentication will be used to access the DAS. In this case the `adminPassword` property should also be empty.
-| `null`
+| 
 
 | `adminPassword`
 | The password of the admin user of your DAS. Cannot be omitted if you declare the admin user. If no authentication will be used to access the DAS you must have empty password for your admin user of your domain.
-| `null`
+| 
+
+| `authorisation`
+| If true, basic access authentication is enabled. And indicates that remote server requires an `adminUser` & `adminPassword`.
+| `false`
+
 
 | `ignoreCertificates`
 | If true, ignores all certificate checks when connecting to the server. Useful when testing dockerized domains and there is no way to turn off SSL.
@@ -65,11 +67,11 @@ to access the DAS. The property value can be true or false.
 
 | `libraries`
 | A comma-separated list of library JAR files. Specify the library JAR files by their relative or absolute paths. Specify relative paths relative to `domain-dir/lib/applibs`. The libraries are made available to the application in the order specified.
-| `N/A`
+| 
 
 | `properties`
 | Optional keyword-value pair that specify additional properties for the deployment. The available properties are determined by the implementation of the component that is being deployed.
-| `N/A`
+| 
 
 | `target`
 | Payara has a notion of a target, which specifies the target to which you are 
@@ -92,15 +94,19 @@ You have to make them accessible for your test environment (consider any firewal
 proxy configuration).
 
 | `server`
+
+| `type`
+| If set to `osgi`, the component is packaged as an OSGi bundle. If the component is packaged as a regular archive, do not set this option.
+| 
 |===
 
 
 NOTE: The context root that will be used to run the tests is also retrieved automatically from the DAS server. If you do not have a `sun-web.xml`, `glassfish-web.xml` or `payara-web.xml` file in your web application, Payara will use the name of your deployment without the extension as context root. The same rule is applied for enterprise applications if there is no `application.xml` file. The jar test-deployments are treated as a web application. You can use the above standard GlassFish / Payara XML files as normal to declare your context root to be applied. You should consider the above description to avoid any conflict with your already deployed web or enterprise applications in your administrative domain. 
 
-The easiest way to provide these system properties to the extension runtime is by using an `arquillian.xml` file placed on the test classpath.
+To configure the Arquillian Container options, you need using an `arquillian.xml` file placed on the test classpath. Here's an example `arquillian.xml` file. It configures `adminPort` with a static value. It configures `adminPassword` as a value of a system property `my.admin.password`, which you can specify for example in the maven `surefire` plugin using the `systemPropertyVariables` option or on command line like `mvn -Dmy.admin.password=mypassword test`.
 
 [source,XML]
-.Example
+.Example `arquillian.xml` file
 ----
 <?xml version="1.0"?>
 <arquillian xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
@@ -108,10 +114,28 @@ The easiest way to provide these system properties to the extension runtime is b
             xsi:schemaLocation="http://jboss.org/schema/arquillian
                 http://jboss.org/schema/arquillian/arquillian_1_0.xsd">
 
-    <container qualifier="payara-server-remote" default="true">
+    <container qualifier="payara" default="true">
         <configuration>
             <property name="adminPort">4848</property>
+            <property name="adminPassword">${my.admin.password}</property>
         </configuration>
     </container>
 </arquillian>
 ----
+
+If you want to configure more containers, you can switch between them by setting the `arquillian.launch` system property to the container's qualifier. This is how you can do it with the maven `surefire` plugin (`my.admin.password` system property is used to set the `adminPassword` property in `arquillian.xml`):
+
+[source,XML]
+.Example Surefire plugin configuration in a `pom.xml` file
+----
+<plugin>
+    <groupId>org.apache.maven.plugins</groupId>
+    <artifactId>maven-surefire-plugin</artifactId>
+    <configuration>
+        <systemPropertyVariables>
+            <arquillian.launch>payara</arquillian.launch>
+            <my.admin.password>mypassword</my.admin.password>
+        </systemPropertyVariables>
+    </configuration>
+</plugin>
+----
\ No newline at end of file
-- 
2.25.1

